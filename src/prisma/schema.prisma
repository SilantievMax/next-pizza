generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  role       UserRole @default(USER)
  email      String   @unique
  fullName   String
  password   String
  provider   String?
  verified   DateTime
  providerId String?

  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())

  name String @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String

  items       ProductItem[]
  ingredients Ingredient[]
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItem {
  id Int @id @default(autoincrement())

  size      Int?
  price     Int
  pizzaType Int?

  cartItems CartItem[]
  product   Product    @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id Int @id @default(autoincrement())

  name     String
  price    Int
  imageUrl String

  products  Product[]
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  token       String
  totalAmount Int    @default(0)

  items  CartItem[]
  user   User?      @relation(fields: [userId], references: [id])
  userId Int?       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  quantity Int

  ingredients   Ingredient[]
  cart          Cart         @relation(fields: [cartId], references: [id])
  cartId        Int
  productItem   ProductItem  @relation(fields: [productItemId], references: [id])
  productItemId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  items       Json
  token       String
  email       String
  phone       String
  status      OrderStatus
  comment     String?
  address     String
  fullName    String
  paymentId   String?
  totalAmount Int

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  code String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
